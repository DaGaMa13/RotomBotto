***********************************************************************************
*	TESIS Creación de una Plataforma Robótica Móvil para la puebas de componentes
*	Garcés Marín Daniel
*	con el apoyo del Laboratorio de Biorobótica
*
*	BITÁCORA DE LA CREACIÓN DEL SISTEMA DE ROTOMBOTTO >> VEGA
*
*	Ultima Versión: 1 de Octubre del 2019
*
***********************************************************************************

 >> CREACIÓN DEL WORKSPACE

 	>$ cd ~/Rotombotto ###Esto no se pudo hacer directamente dentro de la carpeta
 
 	>$ mkdir -p catkin_ws/src
 	>$ cd ~/catkin_ws/
	>$ catkin_make
	>$ source devel/setup.bash
 
 |	#Se copio el workspace dentro de la carpeta del repositorio, se borró la carpeta /Rotombotto/catkin_ws/build/ para poder volver a compilar


>> CREACION DE LOS PAQUETES
	
	# < catkin_create_pkg <package_name> [depend1] [depend2] [depend3] >
 
	*> Paquete nodo principal

		>$ catkin_create_pkg rotombotto std_msgs rospy roscpp
		+ Se agregó el archivo rotombotto_node.cpp
		+ Se agregó el archivo rotombotto_light.cpp
		+ Se agregó el archivo rotombotto_test.cpp

		+ Se modifico el CMakelist { -Línea 136, 137 y 138; 148, 149 y 150;  153, 154 y 155 }
	#--------------------------------------------------------------------------------------------
 
	*> Paquete rotombotto_begin "lauch"

		>$ catkin_create_pkg rotombotto_begin std_msgs rospy roscpp
		# Creación de un fichero para guardar los archivos launch
		>$ cd mkdir launch

		+ Se agregó el archivo rotombotto_test.launch
		+ Se agregó el archivo rotombotto_light.launch
		+ Se agregó el archivo rotombotto_avoid.launch
		+ Se agregó el archivo rotombotto_avoidLight.launch
		+ Se agregó el archivo rotombotto_map.launch

		# >$ roslaunch rotombotto_begin { }.launch
	#--------------------------------------------------------------------------------------------
 
 	*>$ cd mkdir Hardware
	#--------------------------------------------------------------------------------------------
 
	*> Paquete joystick

		>$ catkin_create_pkg joystick std_msgs rospy roscpp
		+ Creación de la carpeta "scripts"
		+ Se agregó el archivo joystick_node.py
		+ Se agregó el archivo joystick_test.py
		# chmod +x { } .py  //Hacer el archivo ejecutable igual agregar: #!/usr/bin/env python  en la parte superior de los archivos
	#--------------------------------------------------------------------------------------------
 
	*> Paquete nodo motores

		>$ catkin_create_pkg motor std_msgs rospy roscpp
 		+ Se crea la carpeta "scripts"
 		+ Se agregó el archivo motor_node.py
 		+ Se agregó el archivo motor_test.py
 		+ Se agregó el archivo roboclaw.py
		# chmod +x { } .py  //Hacer el archivo ejecutable igual agregar: #!/usr/bin/env python  en la parte superior de los archivos
	#--------------------------------------------------------------------------------------------
 
	*> Paquete nodo sensores

		>$ catkin_create_pkg sensor std_msgs rospy roscpp
 		+ Se agregó el archivo sensor_node.cpp
 		+ Se agregó el archivo sensor_test.cpp
 		+ Se modifico el CMakelist
   			-Línea 136 y 137; 147 y 148;  151 y 152
	#--------------------------------------------------------------------------------------------


>> DESCARGA DE PACKAGE COMPLEMENTARIOS

	*> Paquete RPLIDAR

		# Decarga del paquete del repositorio siguiente: https://github.com/robopeak/rplidar_ros
		>$ git clone https://github.com/robopeak/rplidar_ros.git
		+ Descomprimir el archivo y mover el fichero al workspace del sistema: /RotomBotto/catkin_ws/src/
		# Compilar
	#--------------------------------------------------------------------------------------------

	*> Paquete Rosserial

		# Instalación de la paqueterías de ROS
    	>$ sudo apt-get install ros-indigo-rosserial-arduino
   		>$ sudo apt-get install ros-indigo-rosserial

   		# Descarga del pkg de rosserial que se usará en el workspace
    	>$ cd catkin_ws/src 
    	>$ git clone https://github.com/ros-drivers/rosserial.git 
    	>$ cd catkin_ws
    	>$ catkin_make
	#--------------------------------------------------------------------------------------------

	#***********************************************************************************************

	*>Creación del paquete de trasnformadas   >>>> http://wiki.ros.org/navigation/Tutorials/RobotSetup/TF
		>$ cd Rotombotto/catkin_make/src/Navigation/
		>$ catkin_create_pkg rotombotto_setup_tf roscpp tf geometry_msgs

	*## MOVI LOS PAQUETES DE "rplidar" y "rosserial" a la carpeta HARDWARE
		-#El porque?, por mis reverendos huevos obviamente, y lo consideré más adecuado para 
		esa categoría

	*>Creación de los nodos
		+tf_broadcaster.cpp
		+tf_listener.cpp

	*>Modificación de las líneas regulares 137 y 154 del CMakeList

		+ add_executable(tf_broadcaster src/tf_broadcaster.cpp)
		+ add_executable(tf_listener src/tf_listener.cpp)

		+ target_link_libraries(tf_broadcaster ${catkin_LIBRARIES})
		+ target_link_libraries(tf_listener ${catkin_LIBRARIES})

	#***********************************************************************************************

	*>Creación del Paquete para el manejo de los sensores  >>>> http://wiki.ros.org/navigation/Tutorials/RobotSetup/TF

		>$ cd Rotombotto/catkin_make/src/Navigation/
		>$ catkin_create_pkg LaserScan_manager roscpp tf geometry_msgs

	*>Creación de los nodos
		+LaserScan_publisher.cpp

	*>Modificación de las líneas regulares 136, 146 y 149 del CMakeList

		+ add_executable(aserScan_publisher src/LaserScan_publisher.cpp)

		+ target_link_libraries(LaserScan_publisher ${catkin_LIBRARIES})
	#--------------------------------------------------------------------------------------------

		>$ cd Rotombotto/catkin_make/src/Navigation/
		>$ catkin_create_pkg pointClouds_manager roscpp tf geometry_msgs

	*>Creación de los nodos
		+pointClouds_publisher.cpp

	*>Modificación de las líneas regulares 136, 146 y 149 del CMakeList

		+ add_executable(pointClouds_publisher src/pointClouds_publisher.cpp)

		+ target_link_libraries(pointClouds_publisher ${catkin_LIBRARIES})

	#***********************************************************************************************






###############################################################################################

	++++++++>>> VEGA <<<+++++++++

	>>CREACIÓN DE VEGA

 	>$ cd mkdir VEGA

	*> Paquete vega_kaishi "lauch"

		>$ catkin_create_pkg vega_kaishi std_msgs rospy roscpp
		# Creación de un fichero para guardar los archivos launch
		>$ cd mkdir launch

		+ Se agregó el archivo .launch
		+ Se agregó el archivo .launch
		+ Se agregó el archivo .launch
		+ Se agregó el archivo .launch
		+ Se agregó el archivo .launch

		# >$ roslaunch rotombotto_begin { }.launch
	#--------------------------------------------------------------------------------------------


	*> Paquete nodo warning

		>$ catkin_create_pkg warning std_msgs rospy roscpp

 		+ Se agregó el archivo temptwarning.cpp
 		+ Se agregó el archivo .cpp

 		+ Se modifico el CMakelist
   			-Línea 136 y 137; 147 y 148;  151 y 152
	#--------------------------------------------------------------------------------------------


	*> Entorno gráfico  vega_GUI

		#Instalación de paqueterías adicionales
	
			>$ sudo apt-get install ros-kinetic-qt-create 
			>$ sudo apt-get install ros-kinetic-qt-build	

		#Creación del paquete del GUI

			>$ cd ~/Rotombotto/catkin_ws/src/VEGA/
			>$ catkin_create_qt_pkg vega_GUI


		>$rosrun vega_GUI vega_GUI




	#--------------------------------------------------------------------------------------------





******************************************************************************************************************************

>>NOTAS IMPORTANTES


	_> Librería ROBOCLAW

	Al parecer la razón por la que existen tantas divergencias para el uso de los drivers y librerias de la ROBOCLAW se debe a que el archivo del driver se puede dividir en dos categorias

		*roboclaw_driver: la cual es es sí el archivo de control de la roboclaw, la cual contiene todas las funciiones basicas para le uso de la roboclaw

		*roboclaw: esta versión engloba lo anterior en una superclase abastrayendo algunos valores: Puerto y baudaje básicamente para no tener que indicar dichos valores cada vez que se llamen algunas funciones en las cuales el valor será constante durante el uso el equipo 

	Recomiendo el uso de esta última ya que maneja más opciones de uso, además de optimizar el uso de recursos, datos y ya no se deben declarar regularmente algunos datos durante los nodos de ROS.


