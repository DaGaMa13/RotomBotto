Código ROS para Temas Selectos de Hardware.

***********************************************************************************************************************

_>>COMANDO PARA MODIFICACION DE LOS COMANDOS
	$nano .bashrc

---------------------------------------------------------------------- ----------------------------------------

_>>Versión de Ros sobre la que se está trabajando
	$ rosversion -d

---------------------------------------------------------------------- ----------------------------------------

_Creación de un WorkSpace
	$ mkdir -p ~/catkin_ws/src
	$ cd ~/catkin_ws/
	$ catkin_make

	$ source devel/setup.bash

	-Nota: las siguientes líneas son para verificar la correcta creación del WorkSpace
		$ echo $ROS_PACKAGE_PATH
		/home/youruser/catkin_ws/src:/opt/ros/kinetic/share

---------------------------------------------------------------------- ----------------------------------------

_>>Creación de paquetes
	# This is an example, do not try to run this
	$ cd ~/catkin_ws/src
	$ catkin_create_pkg <package_name> [depend1] [depend2] [depend3]

	$ cd ~/catkin_ws
	$ catkin_make

	-Ejemplo
	$ catkin_create_pkg beginner_tutorials std_msgs rospy roscpp

---------------------------------------------------------------------- ----------------------------------------

_>>Building the package
	$ cd ~/catkin_ws
	$ catkin_make
	$ source /opt/ros/kinetic/setup.bash

---------------------------------------------------------------------- ----------------------------------------

_> Programa estandar de publicacion de un mensaje

#include <stdio.h>
#include <stdlib.h>
#include "ros/ros.h"

//FUNCIÓN MAIN
int main(int argc, char **argv){

	int i=0;

    ros::init(argc, argv, "a_star");

	ros::NodeHandle n; //Creamos la conexión para mantener el nodo
	ros::Rate loop_rate(10); //Declaramos el tiempo que se tomara por cada ciclo

	while (ros::ok()){
	std::cout << "Prueba del nodo de A* simple... >>" << i << std::endl;

	ros::spinOnce(); 
	loop_rate.sleep(); //Pausamos el sistema el tiempo declarado anteriormente
	i++;}//Fin del While principal
	
return 0;
}//Fin del MAIN

---------------------------------------------------------------------- ----------------------------------------

_>Impresión con COUT

#include "iostream"
#include "string"

using namespace std;

int main()
{
    string salida1 = "Ejemplo de salida"; //El valor de esta variable se mostrará en pantalla
    int numero = 2; //Este valor también se mostrará en pantalla.
    string salida2 = "Desde AAP."; //Estos valores se concatenarán en una única salida

    //Se concatenan y muestran los valores por pantalla con cout<<
    cout << salida1 << " " << numero << ". " << salida2 << endl; 
   
   return 0;
}

---------------------------------------------------------------------- ----------------------------------------

_>>Levantando el nodo
	-Descomentar en el Cmakelist las linesas add_dependecies y add_executable, lineas 136, 146. y las lineas 149,150,151

	-Se pueden crear varios nodos de un mismo paquete, tener que revisar todas las lineas similares a las nteriores y descomentarlas para la creación de sus ejecutables.


---------------------------------------------------------------------- ----------------------------------------

_>>Correr el nodo
	-Ejecutar ROS en una terminal
		$ roscore

	-Ejecutar en otra terminal el nodo de la siguiente forma
		$rosrun <nombre_paqueteria> <archivo.cpp>  
	Puede tener el formato "archivo.cpp" o simplemente "archivo"

---------------------------------------------------------------------- ----------------------------------------

_>>Comandos TOPICOS
	-Lsitar todos los topico que se encuentran en ese momento comunicandose
		$ rostopic list
	-Mostrar los mensajes que esta publicando en topico mencionado
		$ rostopic echo /topic_name
---------------------------------------------------------------------- ----------------------------------------

_>> COMANDOS SERVICIOS

	->$ rosservice list
	->$ rosservice info /name  :: datos del servicio
	->$ rossrv info pkg/name   ::: datos más descriptivos del pckg y del servicio

	->$ rosservice  call /name_service [datos]

---------------------------------------------------------------------- ----------------------------------------

_>>USO DE LOS ARCHIVOS PYTHON

	-En la carpeta de la paquetería se crea un fichero de nombre "scrpts" que reeemplazará al fichero "src" y donde se almcenarán los archivos python

	-Una vez colocados los archivos a utilziar se utilizan los siguientes comantos
		$ cd ~/scripts/
		$ chmod +x nombre_archivo.py

	-Para la ejecución del nodo es similar a los anteriores
		$rosrun <nombre_paqueteria> <archivo.py>  

---------------------------------------------------------------------- ----------------------------------------

->> USO DE ROSSERIAL-ARDUINO

	>$rosrun rosserial_python serial_node.py /dev/ttyACM0 

	>$rosrun rosserial_python serial_node.py /dev/ttyACM1 

---------------------------------------------------------------------- ----------------------------------------

->> USO DE CONTROL JOYSTICK CON PAQUETE JOY

	-Identificación del control

		>$ ls /dev/input
	buscar una entrada con el nombre "jsX" X=numero regularmente 0

	-Ejecución del nodo

		>$roscore 

		>$rosrun joy joy_node

		>$rostopic echo /joy 

		>$rostopic echo /hardware/joy 

---------------------------------------------------------------------- ----------------------------------------

_>>CREACIÓN DE UN LAUNCH

	-Se crea una carpeta tipo paquete y luego un directorio con el nombre launch
	-Se inserta en dicho fichero el archivo tipo launch, compilar no es necesario pero si recomandable

	Estructura de un Launch simple:

	<?xml version="1.0" encoding="utf-8"?>
		
	<launch>

		<group ns ="ROS">

	        <!--	Inicializar nodo <node name="rotombotto_arduino_node"/> con la siguiente configuración para el puerto serial-->
			<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
			<param name="port" value="/dev/ttyACM0"/>
			<param name="baud" value="500000"/>
			</node>

		</group>

		<group ns="hardware">
	        <node name="joy_node" pkg="joy" type="joy_node" output="screen"/> 
			<node name="sensor_test" pkg="sensor" type="sensor_test" output="screen" />
			<!--<node name="motor_test" pkg="motor" type="motor_test.py" output="screen" />-->
			<node name="joystick_test" pkg="joystick" type="joystick_test.py" output="screen"/>
		</group>

		<group ns="software">
			<node name="rotombotto_test" pkg="rotombotto" type="rotombotto_test" output="screen" />
		</group>

	</launch>

	-Los paquetes pueden ser argupados en grupos para un orden más adecuado
	 ***NOTA::::: El grupo en el que se le asigna a un cierto paquete puede cambiar la dirección de algún topico
		hardware/joy/data >>>> /ROS/joy/data por dar un ejemplo

	-Los archivos python deben ser declarados como .py en el "type", los .cpp no hay problemas.

---------------------------------------------------------------------- ----------------------------------------

_>>COMANDOS PARA LEVANTAR UN LAUNCH
	>$ roslaunch bring_up hardware_simul.launch



---------------------------------------------------------------------- ----------------------------------------

_>> COMANDOS PARA EL USO DE SONIDO

	>$roscore

	>$rosrun sound_play soundplay_node.py

	-En caso de que se quiera utilizar un archivo de audio usar:

		>$rosrun sound_play play.py [direccion del archivo.ogg/wav]

		>$rosrun sound_play play.py /home/danielg/RotomBotto/catkin_ws/src/VEGA/media/DOOM_BFG_Division.ogg

	-En caso de que se requiera leer algo:

		>$rosrun sound_play say.py 'algo'
		>$rosrun sound_play say.py < archivo.txt


---------------------------------------------------------------------- ----------------------------------------



---------------------------------------------------------------------- ----------------------------------------



---------------------------------------------------------------------- ----------------------------------------



---------------------------------------------------------------------- ----------------------------------------


---------------------------------------------------------------------- ----------------------------------------

---------------------------------------------------------------------- ----------------------------------------


---------------------------------------------------------------------- ----------------------------------------



---------------------------------------------------------------------- ----------------------------------------



---------------------------------------------------------------------- ----------------------------------------



---------------------------------------------------------------------- ----------------------------------------

	
	
